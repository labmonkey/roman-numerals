{"version":3,"sources":["../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","_layout.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","../../../node_modules/bourbon/app/assets/stylesheets/functions/_px-to-em.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","_typography.scss","_variables.scss","_buttons.scss","_sections.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_media.scss","../../../node_modules/bourbon-neat/app/assets/stylesheets/grid/_shift.scss"],"names":[],"mappings":"AAGE;EACE,uBAAuB,EACxB;;AAED;EAII,oBAAoB,EACrB;;ACZL;EACE,iBAAiB,EAClB;;AAED;EACE,qEAAiC;EAIjC,yEAAqC,EACtC;;AAED;ECoBE,gBCrBe;EDsBf,kBACa;EADb,mBAEc;EDrBd,kBAA8B;EAC9B,eAAe;EACf,gBAAgB,EACjB;EALD;IGQI,YAAY;IACZ,YAAY;IACZ,eAAe,EAChB;;ACvBH;EACE,gCCE4B;EDD5B,iBAAiB,EAClB;;AAMD;EACE,UAAU;EACV,wBAAwB;EACxB,gCCT4B;EDU5B,sBAAsB;EACtB,iBAAiB;EACjB,gBAAgB;EAChB,aAAa;EACb,iBAAiB;EACjB,iDAAiC;EACjC,YAAY;EACZ,mBAAmB;EACnB,iBAAiB,EAKlB;EAjBD;IAcI,UAAU;IACV,cAAc,EACf;;AEzBH;EACE,gCDE4B;ECD5B,iBAAiB;EACjB,aAAa;EACb,cAAc;EACd,oBAAoB;EACpB,wBAAwB;EACxB,aAAa;EACb,gBAAgB;EAChB,iBAAiB;EACjB,uBAAuB;EACvB,mBAAmB;EACnB,0BAA0B;EAC1B,YAAY,EA2Bb;EAxCD;IAeI,mBAAmB;IACnB,mBAAmB;IACnB,SAAS;IACT,UAAU;IACV,WAAW;IACX,YAAY;IACZ,YAAY;IACZ,iBAAiB;IACjB,0BAA0B;IAC1B,YAAY,EACb;EAzBH;IA2BI,eD1Ba;IC2Bb,0BAA0B;IAC1B,gBAAgB;IAChB,YAAY;IACZ,iBAAiB,EAQlB;IAvCH;MAiCM,OAAO;MACP,QAAQ;MACR,SAAS;MACT,UAAU;MACV,0BAA0B,EAC3B;;ACtCL;EACE,mBAAmB;EACnB,aAAa,EA6Dd;EA/DD;IAKM,gBAAgB;IAChB,iBAAiB;IACjB,aAAa;IACb,2CAA2B,EAC5B;EATL;IAYI,oBAAoB,EAiBrB;IA7BH;MJoBI,YAAY;MACZ,YAAY;MACZ,eAAe,EAChB;IIvBH;MCmEI,YAAO;MAGL,eAAe;MAef,4BCtEc;MDuEd,YC5Ec,EFMf;MAhBL;QCyFQ,gBAA+B,EAChC;IEhCH;MH1DJ;QCmEI,YAAO;QAGL,eAAe;QAef,4BCtEc;QDuEd,sBC5Ec,EFUb;QAFD;UCuEE,gBAA+B,EAChC;MDrED;QC8CF,YAAO;QAGL,eAAe;QAef,4BCtEc;QDuEd,sBC5Ec,EFab;QAvBP;UCyFQ,gBAA+B,EAChC;MD1FP;QI6CE,4BAAgD;QHsB9C,YAAO;QAGL,eAAe;QAef,4BCtEc;QDuEd,sBC5Ec,EFiBb;QA3BP;UCyFQ,gBAA+B,EAChC,EAAA;ED1FP;ICmEI,YAAO;IAGL,eAAe;IAef,4BCtEc;IDuEd,qBC5Ec;IEmClB,4BAAgD;IJX5C,mBAAmB;IACnB;;;;;;;;;;;QAWE,EACH;IAhBD;MC0DI,gBAA+B,EAChC;ED1FP;IAkDI,iBAAiB,EAClB;EAnDH;IAqDI,iBAAiB;IACjB,WAAW;IACX,UAAU,EAOX;IANC;MACE,qBAAqB,EAItB;MA7DL;QA2DQ,iBAAiB,EAClB","file":"app.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","body, html {\n  min-height: 100%;\n}\n\nbody {\n  background-image: linear-gradient(180deg, $bg-light 25%, $bg-dark 100%);\n  background-image: -moz-linear-gradient(bottom, $bg-light 25%, $bg-dark 100%);\n  background-image: -webkit-linear-gradient(bottom, $bg-light 25%, $bg-dark 100%);\n  background-image: -o-linear-gradient(bottom, $bg-light 25%, $bg-dark 100%);\n  background-image: -ms-linear-gradient(bottom, $bg-light 25%, $bg-dark 100%);\n}\n\n.container {\n  @include outer-container;\n  max-width: $media-desktop-size + 20px * 2;\n  margin: 0 auto;\n  padding: 0 20px;\n}","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","// Convert pixels to ems\n// eg. for a relational value of 12px write em(12) when the parent is 16px\n// if the parent is another value say 24px write em(12, 24)\n\n@function em($pxval, $base: $em-base) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1em;\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","body {\n  font-family: $font-main;\n  font-weight: 200;\n}\n\nh1, h2, h3, h4, h5, h6 {\n\n}\n\n.decimal-text, .roman-text {\n  border: 0;\n  background: transparent;\n  font-family: $font-main;\n  display: inline-block;\n  border-bottom: 0;\n  font-size: 70px;\n  color: white;\n  font-weight: 200;\n  box-shadow: 0 6px 10px -10px rgba(0, 0, 0, 0.47);\n  width: 100%;\n  text-align: center;\n  line-height: 1.6;\n  &:focus {\n    border: 0;\n    outline: none;\n  }\n}","$bg-light: lighten(#f39c12, 10%);\n$bg-dark: lighten(#e67e22, 10%);\n\n$font-main: 'Lato', sans-serif;\n\n$media-desktop-size: 1024px;\n$media-tablet-size: 720px;\n\n$media-desktop: new-breakpoint(min-width $media-desktop-size);\n$media-tablet: new-breakpoint(min-width $media-tablet-size);\n",".button-submit {\n  font-family: $font-main;\n  margin-top: 15px;\n  width: 100px;\n  height: 100px;\n  border-radius: 50px;\n  background: transparent;\n  color: white;\n  font-size: 20px;\n  font-weight: 200;\n  border: 1px solid #fff;\n  position: relative;\n  transition: all 0.3s ease;\n  z-index: 20;\n  &:before {\n    border-radius: 50%;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    right: 50%;\n    bottom: 50%;\n    content: \"\";\n    background: #fff;\n    transition: all 0.3s ease;\n    z-index: -1;\n  }\n  &:hover {\n    color: $bg-dark;\n    transition: all 0.3s ease;\n    cursor: pointer;\n    z-index: 20;\n    box-shadow: none;\n    &:before {\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      transition: all 0.3s ease;\n    }\n  }\n}","section {\n  text-align: center;\n  color: white;\n  &.header {\n    h1 {\n      font-size: 70px;\n      font-weight: 100;\n      color: white;\n      text-shadow: 0 2px 6px rgba(0, 0, 0, 0.47);\n    }\n  }\n  &.form {\n    margin-bottom: 60px;\n    @include clearfix;\n    .roman, .submitm .decimal {\n      @include span-columns(12);\n    }\n    @include media($media-tablet-size) {\n      .roman {\n        @include span-columns(3);\n      }\n      .submit {\n        @include span-columns(2);\n      }\n      .decimal {\n        @include shift(2);\n        @include span-columns(3);\n      }\n    }\n  }\n  &.list {\n    .history {\n      @include span-columns(6);\n      @include shift(3);\n      position: relative;\n      /*\n      &:after {\n        content: \"\";\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        right: 0;\n        height: 50px;\n        background: -webkit-linear-gradient(to bottom, transparent, opacify($bg-dark, 0.1));\n        background: linear-gradient(to bottom, transparent, opacify($bg-dark, 0.1));\n      }\n      */\n    }\n  }\n  &.errors {\n    font-size: 1.1em;\n  }\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    li {\n      margin-bottom: 0.5em;\n      span {\n        font-weight: 300;\n      }\n    }\n  }\n}","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","@charset \"UTF-8\";\n\n/// Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.\n///\n/// @param {Number (unitless)} $n-columns [1]\n///   Number of columns by which the element shifts.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -25.58941%;\n///   }\n\n@mixin shift($n-columns: 1) {\n  @include shift-in-context($n-columns);\n}\n\n/// Translates an element horizontally by a number of columns, in a specific nesting context.\n///\n/// @param {List} $shift\n///   A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`).\n///\n///   The two values can be separated with any string such as `of`, `/`, etc.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3 of 6);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -52.41458%;\n///   }\n\n@mixin shift-in-context($shift: $columns of $container-columns) {\n  $n-columns: nth($shift, 1);\n  $parent-columns: container-shift($shift) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  margin-#{$opposite-direction}: $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);\n\n  // Reset nesting context\n  $parent-columns: $grid-columns !global;\n}\n"],"sourceRoot":"/source/"}